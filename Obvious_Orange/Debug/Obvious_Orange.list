
Obvious_Orange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080026f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080026f0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a9b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ba  00000000  00000000  00026ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb0e  00000000  00000000  00028c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fae  00000000  00000000  0004773e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba1a1  00000000  00000000  0004e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010888d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001958  00000000  00000000  001088e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002684 	.word	0x08002684

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002684 	.word	0x08002684

080001cc <HAL_CAN_RxFifo1MsgPendingCallback>:

int datacheck = 0;


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80001d6:	4a09      	ldr	r2, [pc, #36]	; (80001fc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80001d8:	2101      	movs	r1, #1
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 fdad 	bl	8000d3a <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d102      	bne.n	80001ee <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck = 1;
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	601a      	str	r2, [r3, #0]
	}
}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	20000068 	.word	0x20000068
 8000200:	20000098 	.word	0x20000098

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa24 	bl	8000656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f857 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8f7 	bl	8000404 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000216:	f000 f8a3 	bl	8000360 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800021a:	4823      	ldr	r0, [pc, #140]	; (80002a8 <main+0xa4>)
 800021c:	f000 fc79 	bl	8000b12 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000220:	2110      	movs	r1, #16
 8000222:	4821      	ldr	r0, [pc, #132]	; (80002a8 <main+0xa4>)
 8000224:	f000 fe9b 	bl	8000f5e <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 2;  // data length
 8000228:	4b20      	ldr	r3, [pc, #128]	; (80002ac <main+0xa8>)
 800022a:	2202      	movs	r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <main+0xa8>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <main+0xa8>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // ID
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <main+0xa8>)
 800023c:	f240 1203 	movw	r2, #259	; 0x103
 8000240:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <main+0xa8>)
 8000244:	2200      	movs	r2, #0
 8000246:	751a      	strb	r2, [r3, #20]


  TxData[0] = 200;  // ms delay
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <main+0xac>)
 800024a:	22c8      	movs	r2, #200	; 0xc8
 800024c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 20;  // loop rep
 800024e:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <main+0xac>)
 8000250:	2214      	movs	r2, #20
 8000252:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay (1000);
 8000254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000258:	f000 fa72 	bl	8000740 <HAL_Delay>

	  if (datacheck)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <main+0xb0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f7      	beq.n	8000254 <main+0x50>
	  {
		  // blink the LED
		  for (int i=0; i<RxData[1]; i++)
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e00d      	b.n	8000286 <main+0x82>
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000272:	f001 fb5d 	bl	8001930 <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <main+0xb4>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fa60 	bl	8000740 <HAL_Delay>
		  for (int i=0; i<RxData[1]; i++)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0xb4>)
 8000288:	785b      	ldrb	r3, [r3, #1]
 800028a:	461a      	mov	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4293      	cmp	r3, r2
 8000290:	dbeb      	blt.n	800026a <main+0x66>
		  }

		  datacheck = 0;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0xb0>)
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]

		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0xb8>)
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <main+0xac>)
 800029c:	4903      	ldr	r1, [pc, #12]	; (80002ac <main+0xa8>)
 800029e:	4802      	ldr	r0, [pc, #8]	; (80002a8 <main+0xa4>)
 80002a0:	f000 fc7b 	bl	8000b9a <HAL_CAN_AddTxMessage>
	  HAL_Delay (1000);
 80002a4:	e7d6      	b.n	8000254 <main+0x50>
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028
 80002ac:	20000050 	.word	0x20000050
 80002b0:	20000084 	.word	0x20000084
 80002b4:	20000098 	.word	0x20000098
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	20000094 	.word	0x20000094

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2244      	movs	r2, #68	; 0x44
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f9d0 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f001 fb4b 	bl	8001980 <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f8ba 	bl	8000468 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	2303      	movs	r3, #3
 8000304:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000306:	2302      	movs	r3, #2
 8000308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800030a:	230c      	movs	r3, #12
 800030c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030e:	2307      	movs	r3, #7
 8000310:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fb84 	bl	8001a2c <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 f89d 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 ff84 	bl	8002254 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000352:	f000 f889 	bl	8000468 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3758      	adds	r7, #88	; 0x58
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <MX_CAN1_Init+0xa0>)
 800036a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <MX_CAN1_Init+0x9c>)
 800036e:	2212      	movs	r2, #18
 8000370:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <MX_CAN1_Init+0x9c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000380:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000384:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000388:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800038c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800038e:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000390:	2200      	movs	r2, #0
 8000392:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MX_CAN1_Init+0x9c>)
 8000396:	2200      	movs	r2, #0
 8000398:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_CAN1_Init+0x9c>)
 800039c:	2200      	movs	r2, #0
 800039e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_CAN1_Init+0x9c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_CAN1_Init+0x9c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_CAN1_Init+0x9c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003b2:	4812      	ldr	r0, [pc, #72]	; (80003fc <MX_CAN1_Init+0x9c>)
 80003b4:	f000 f9e8 	bl	8000788 <HAL_CAN_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80003be:	f000 f853 	bl	8000468 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003c2:	2301      	movs	r3, #1
 80003c4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80003e6:	230e      	movs	r3, #14
 80003e8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80003ea:	463b      	mov	r3, r7
 80003ec:	4619      	mov	r1, r3
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <MX_CAN1_Init+0x9c>)
 80003f0:	f000 fac5 	bl	800097e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	3728      	adds	r7, #40	; 0x28
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000028 	.word	0x20000028
 8000400:	40006400 	.word	0x40006400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x60>)
 800041a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_GPIO_Init+0x60>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x60>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f001 fa61 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800043e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2300      	movs	r3, #0
 800044e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f001 f8e8 	bl	800162c <HAL_GPIO_Init>

}
 800045c:	bf00      	nop
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6613      	str	r3, [r2, #96]	; 0x60
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000496:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	6593      	str	r3, [r2, #88]	; 0x58
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_MspInit+0x44>)
 80004a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <HAL_CAN_MspInit+0xa0>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d139      	bne.n	8000552 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a19      	ldr	r2, [pc, #100]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_CAN_MspInit+0xa4>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800050e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000520:	2309      	movs	r3, #9
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4619      	mov	r1, r3
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 f87d 	bl	800162c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	2014      	movs	r0, #20
 8000538:	f001 f841 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800053c:	2014      	movs	r0, #20
 800053e:	f001 f85a 	bl	80015f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2015      	movs	r0, #21
 8000548:	f001 f839 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800054c:	2015      	movs	r0, #21
 800054e:	f001 f852 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	; 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40006400 	.word	0x40006400
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f8a6 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <CAN1_RX0_IRQHandler+0x10>)
 80005be:	f000 fcf4 	bl	8000faa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <CAN1_RX1_IRQHandler+0x10>)
 80005d2:	f000 fcea 	bl	8000faa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028

080005e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800063c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000608:	f7ff ffea 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000632:	f001 fffb 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000636:	f7ff fde5 	bl	8000204 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800063c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000648:	080026e4 	.word	0x080026e4
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000650:	200000a0 	.word	0x200000a0

08000654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_IRQHandler>

08000656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 ffa1 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000666:	200f      	movs	r0, #15
 8000668:	f000 f80e 	bl	8000688 <HAL_InitTick>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	e001      	b.n	800067c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000678:	f7ff fefc 	bl	8000474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800067c:	79fb      	ldrb	r3, [r7, #7]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_InitTick+0x6c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d023      	beq.n	80006e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <HAL_InitTick+0x70>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_InitTick+0x6c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ffad 	bl	8001612 <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10f      	bne.n	80006de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d809      	bhi.n	80006d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 ff77 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_InitTick+0x74>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e007      	b.n	80006e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e004      	b.n	80006e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e001      	b.n	80006e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	2000009c 	.word	0x2000009c

08000728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	2000009c 	.word	0x2000009c

08000740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000748:	f7ff ffee 	bl	8000728 <HAL_GetTick>
 800074c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000758:	d005      	beq.n	8000766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_Delay+0x44>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000766:	bf00      	nop
 8000768:	f7ff ffde 	bl	8000728 <HAL_GetTick>
 800076c:	4602      	mov	r2, r0
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8f7      	bhi.n	8000768 <HAL_Delay+0x28>
  {
  }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008

08000788 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e0ed      	b.n	8000976 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fe88 	bl	80004bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007bc:	f7ff ffb4 	bl	8000728 <HAL_GetTick>
 80007c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007c2:	e012      	b.n	80007ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007c4:	f7ff ffb0 	bl	8000728 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d90b      	bls.n	80007ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2205      	movs	r2, #5
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e0c5      	b.n	8000976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0e5      	beq.n	80007c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 0202 	bic.w	r2, r2, #2
 8000806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000808:	f7ff ff8e 	bl	8000728 <HAL_GetTick>
 800080c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800080e:	e012      	b.n	8000836 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000810:	f7ff ff8a 	bl	8000728 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	2b0a      	cmp	r3, #10
 800081c:	d90b      	bls.n	8000836 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2205      	movs	r2, #5
 800082e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e09f      	b.n	8000976 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1e5      	bne.n	8000810 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7e1b      	ldrb	r3, [r3, #24]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d108      	bne.n	800085e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e007      	b.n	800086e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7e5b      	ldrb	r3, [r3, #25]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d108      	bne.n	8000888 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	e007      	b.n	8000898 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000896:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7e9b      	ldrb	r3, [r3, #26]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d108      	bne.n	80008b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 0220 	orr.w	r2, r2, #32
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e007      	b.n	80008c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0220 	bic.w	r2, r2, #32
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7edb      	ldrb	r3, [r3, #27]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d108      	bne.n	80008dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0210 	bic.w	r2, r2, #16
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	e007      	b.n	80008ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f042 0210 	orr.w	r2, r2, #16
 80008ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7f1b      	ldrb	r3, [r3, #28]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d108      	bne.n	8000906 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0208 	orr.w	r2, r2, #8
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	e007      	b.n	8000916 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 0208 	bic.w	r2, r2, #8
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7f5b      	ldrb	r3, [r3, #29]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d108      	bne.n	8000930 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0204 	orr.w	r2, r2, #4
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e007      	b.n	8000940 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0204 	bic.w	r2, r2, #4
 800093e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	ea42 0103 	orr.w	r1, r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	430a      	orrs	r2, r1
 8000964:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800097e:	b480      	push	{r7}
 8000980:	b087      	sub	sp, #28
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000994:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d003      	beq.n	80009a4 <HAL_CAN_ConfigFilter+0x26>
 800099c:	7cfb      	ldrb	r3, [r7, #19]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	f040 80aa 	bne.w	8000af8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009aa:	f043 0201 	orr.w	r2, r3, #1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	f003 031f 	and.w	r3, r3, #31
 80009bc:	2201      	movs	r2, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d123      	bne.n	8000a26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	401a      	ands	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3248      	adds	r2, #72	; 0x48
 8000a06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a1c:	6979      	ldr	r1, [r7, #20]
 8000a1e:	3348      	adds	r3, #72	; 0x48
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	440b      	add	r3, r1
 8000a24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d122      	bne.n	8000a74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3248      	adds	r2, #72	; 0x48
 8000a54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a6a:	6979      	ldr	r1, [r7, #20]
 8000a6c:	3348      	adds	r3, #72	; 0x48
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a8e:	e007      	b.n	8000aa0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000aba:	e007      	b.n	8000acc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d107      	bne.n	8000ae4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000aea:	f023 0201 	bic.w	r2, r3, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e006      	b.n	8000b06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
  }
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	371c      	adds	r7, #28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d12e      	bne.n	8000b84 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b3e:	f7ff fdf3 	bl	8000728 <HAL_GetTick>
 8000b42:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b44:	e012      	b.n	8000b6c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b46:	f7ff fdef 	bl	8000728 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b0a      	cmp	r3, #10
 8000b52:	d90b      	bls.n	8000b6c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2205      	movs	r2, #5
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e012      	b.n	8000b92 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1e5      	bne.n	8000b46 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e006      	b.n	8000b92 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
  }
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b089      	sub	sp, #36	; 0x24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bb8:	7ffb      	ldrb	r3, [r7, #31]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d003      	beq.n	8000bc6 <HAL_CAN_AddTxMessage+0x2c>
 8000bbe:	7ffb      	ldrb	r3, [r7, #31]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	f040 80ad 	bne.w	8000d20 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10a      	bne.n	8000be6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 8095 	beq.w	8000d10 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	0e1b      	lsrs	r3, r3, #24
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10d      	bne.n	8000c1e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	6809      	ldr	r1, [r1, #0]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3318      	adds	r3, #24
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	440b      	add	r3, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e00f      	b.n	8000c3e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c28:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c2e:	68f9      	ldr	r1, [r7, #12]
 8000c30:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c32:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3318      	adds	r3, #24
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	440b      	add	r3, r1
 8000c3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3318      	adds	r3, #24
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3304      	adds	r3, #4
 8000c50:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	7d1b      	ldrb	r3, [r3, #20]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d111      	bne.n	8000c7e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3318      	adds	r3, #24
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	4413      	add	r3, r2
 8000c66:	3304      	adds	r3, #4
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	6811      	ldr	r1, [r2, #0]
 8000c6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3318      	adds	r3, #24
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	440b      	add	r3, r1
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3307      	adds	r3, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	061a      	lsls	r2, r3, #24
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3306      	adds	r3, #6
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3305      	adds	r3, #5
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3204      	adds	r2, #4
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	6811      	ldr	r1, [r2, #0]
 8000ca6:	ea43 0200 	orr.w	r2, r3, r0
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	440b      	add	r3, r1
 8000cb0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000cb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3303      	adds	r3, #3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	061a      	lsls	r2, r3, #24
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	041b      	lsls	r3, r3, #16
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	6811      	ldr	r1, [r2, #0]
 8000cdc:	ea43 0200 	orr.w	r2, r3, r0
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	440b      	add	r3, r1
 8000ce6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	4413      	add	r3, r2
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	f043 0201 	orr.w	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3318      	adds	r3, #24
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	440b      	add	r3, r1
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e00e      	b.n	8000d2e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e006      	b.n	8000d2e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
  }
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b087      	sub	sp, #28
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d003      	beq.n	8000d5e <HAL_CAN_GetRxMessage+0x24>
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	f040 80f3 	bne.w	8000f44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10e      	bne.n	8000d82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d116      	bne.n	8000da0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0e7      	b.n	8000f52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d107      	bne.n	8000da0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e0d8      	b.n	8000f52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	331b      	adds	r3, #27
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0204 	and.w	r2, r3, #4
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	331b      	adds	r3, #27
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0d5b      	lsrs	r3, r3, #21
 8000dce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	331b      	adds	r3, #27
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	4413      	add	r3, r2
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	331b      	adds	r3, #27
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0202 	and.w	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	331b      	adds	r3, #27
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4413      	add	r3, r2
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 020f 	and.w	r2, r3, #15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	331b      	adds	r3, #27
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4413      	add	r3, r2
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	331b      	adds	r3, #27
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	3304      	adds	r3, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0a1a      	lsrs	r2, r3, #8
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0c1a      	lsrs	r2, r3, #16
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	3302      	adds	r3, #2
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0e1a      	lsrs	r2, r3, #24
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3303      	adds	r3, #3
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a1a      	lsrs	r2, r3, #8
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3305      	adds	r3, #5
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0c1a      	lsrs	r2, r3, #16
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	3306      	adds	r3, #6
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0e1a      	lsrs	r2, r3, #24
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3307      	adds	r3, #7
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0220 	orr.w	r2, r2, #32
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0220 	orr.w	r2, r2, #32
 8000f3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e006      	b.n	8000f52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
  }
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d002      	beq.n	8000f7c <HAL_CAN_ActivateNotification+0x1e>
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d109      	bne.n	8000f90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6959      	ldr	r1, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e006      	b.n	8000f9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
  }
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b08a      	sub	sp, #40	; 0x28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d07c      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f983 	bl	8001318 <HAL_CAN_TxMailbox0CompleteCallback>
 8001012:	e016      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e00c      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e002      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f989 	bl	8001354 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d024      	beq.n	8001096 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f963 	bl	800132c <HAL_CAN_TxMailbox1CompleteCallback>
 8001066:	e016      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e00c      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e002      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f969 	bl	8001368 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d024      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f943 	bl	8001340 <HAL_CAN_TxMailbox2CompleteCallback>
 80010ba:	e016      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	e00c      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	e002      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f949 	bl	800137c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2208      	movs	r2, #8
 8001128:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f93a 	bl	80013a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f921 	bl	8001390 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f912 	bl	80013b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff f80d 	bl	80001cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2210      	movs	r2, #16
 80011cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8fc 	bl	80013cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2208      	movs	r2, #8
 80011ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8f5 	bl	80013e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d07b      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d072      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03e      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001278:	2b60      	cmp	r3, #96	; 0x60
 800127a:	d02b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x32a>
 800127c:	2b60      	cmp	r3, #96	; 0x60
 800127e:	d82e      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001280:	2b50      	cmp	r3, #80	; 0x50
 8001282:	d022      	beq.n	80012ca <HAL_CAN_IRQHandler+0x320>
 8001284:	2b50      	cmp	r3, #80	; 0x50
 8001286:	d82a      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d019      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x316>
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	d826      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001290:	2b30      	cmp	r3, #48	; 0x30
 8001292:	d010      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x30c>
 8001294:	2b30      	cmp	r3, #48	; 0x30
 8001296:	d822      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001298:	2b10      	cmp	r3, #16
 800129a:	d002      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x2f8>
 800129c:	2b20      	cmp	r3, #32
 800129e:	d005      	beq.n	80012ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012a0:	e01d      	b.n	80012de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012aa:	e019      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b4:	e014      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012be:	e00f      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c8:	e00a      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d2:	e005      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012dc:	e000      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80012de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2204      	movs	r2, #4
 80012f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f872 	bl	80013f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e148      	b.n	80018ce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 813a 	beq.w	80018c8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8094 	beq.w	80018c8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b52      	ldr	r3, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6613      	str	r3, [r2, #96]	; 0x60
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e2:	d00d      	beq.n	8001800 <HAL_GPIO_Init+0x1d4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d007      	beq.n	80017fc <HAL_GPIO_Init+0x1d0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_GPIO_Init+0x1cc>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1d6>
 80017f8:	2307      	movs	r3, #7
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1d6>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1d6>
 8001800:	2300      	movs	r3, #0
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001812:	4937      	ldr	r1, [pc, #220]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f aeaf 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43d9      	mvns	r1, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	400b      	ands	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_PWREx_GetVoltageRange+0x18>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40007000 	.word	0x40007000

08001980 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198e:	d130      	bne.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199c:	d038      	beq.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a6:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2232      	movs	r2, #50	; 0x32
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c4:	e002      	b.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d8:	d102      	bne.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f2      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ec:	d110      	bne.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e00f      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d007      	beq.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a08:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40007000 	.word	0x40007000
 8001a24:	20000000 	.word	0x20000000
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f000 bc02 	b.w	8002244 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a40:	4b96      	ldr	r3, [pc, #600]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a4a:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80e4 	beq.w	8001c2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4c>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	f040 808b 	bne.w	8001b86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f040 8087 	bne.w	8001b86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a78:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_OscConfig+0x64>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e3d9      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_RCC_OscConfig+0x7e>
 8001aa0:	4b7e      	ldr	r3, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa8:	e005      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d223      	bcs.n	8001b02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fd54 	bl	800256c <RCC_SetFlashLatencyFromMSIRange>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e3ba      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	496d      	ldr	r1, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aec:	4b6b      	ldr	r3, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4968      	ldr	r1, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
 8001b00:	e025      	b.n	8001b4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4960      	ldr	r1, [pc, #384]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	495b      	ldr	r1, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fd14 	bl	800256c <RCC_SetFlashLatencyFromMSIRange>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e37a      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4e:	f000 fc81 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4950      	ldr	r1, [pc, #320]	; (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_RCC_OscConfig+0x278>)
 8001b6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fd88 	bl	8000688 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d052      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	e35e      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d032      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a42      	ldr	r2, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fdc5 	bl	8000728 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fdc1 	bl	8000728 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e347      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4930      	ldr	r1, [pc, #192]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	492b      	ldr	r1, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e01a      	b.n	8001c2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fd92 	bl	8000728 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c08:	f7fe fd8e 	bl	8000728 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e314      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1dc>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d073      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x21c>
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d10e      	bne.n	8001c60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d063      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d15f      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e2f1      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x24c>
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e025      	b.n	8001cc4 <HAL_RCC_OscConfig+0x298>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d114      	bne.n	8001cac <HAL_RCC_OscConfig+0x280>
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a02      	ldr	r2, [pc, #8]	; (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e013      	b.n	8001cc4 <HAL_RCC_OscConfig+0x298>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	0800269c 	.word	0x0800269c
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	4ba0      	ldr	r3, [pc, #640]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a9f      	ldr	r2, [pc, #636]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a9c      	ldr	r2, [pc, #624]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fd2c 	bl	8000728 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7fe fd28 	bl	8000728 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2ae      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x2a8>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fd18 	bl	8000728 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7fe fd14 	bl	8000728 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e29a      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2d0>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d060      	beq.n	8001dec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x310>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d119      	bne.n	8001d6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d116      	bne.n	8001d6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x328>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e277      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	4973      	ldr	r1, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d68:	e040      	b.n	8001dec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d023      	beq.n	8001dba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fcd3 	bl	8000728 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7fe fccf 	bl	8000728 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e255      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	495f      	ldr	r1, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e018      	b.n	8001dec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fcaf 	bl	8000728 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe fcab 	bl	8000728 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e231      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d03c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7fe fc8a 	bl	8000728 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe fc86 	bl	8000728 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e20c      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ef      	beq.n	8001e18 <HAL_RCC_OscConfig+0x3ec>
 8001e38:	e01b      	b.n	8001e72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fc6d 	bl	8000728 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe fc69 	bl	8000728 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1ef      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ef      	bne.n	8001e52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80a6 	beq.w	8001fcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_RCC_OscConfig+0x508>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d118      	bne.n	8001eea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_RCC_OscConfig+0x508>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x508>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fc30 	bl	8000728 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe fc2c 	bl	8000728 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1b2      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_RCC_OscConfig+0x508>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4d8>
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f02:	e029      	b.n	8001f58 <HAL_RCC_OscConfig+0x52c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d115      	bne.n	8001f38 <HAL_RCC_OscConfig+0x50c>
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x504>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2c:	e014      	b.n	8001f58 <HAL_RCC_OscConfig+0x52c>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	4b9a      	ldr	r3, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	4a99      	ldr	r2, [pc, #612]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a95      	ldr	r2, [pc, #596]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7fe fbe2 	bl	8000728 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe fbde 	bl	8000728 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e162      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ed      	beq.n	8001f68 <HAL_RCC_OscConfig+0x53c>
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7fe fbcb 	bl	8000728 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7fe fbc7 	bl	8000728 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e14b      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fac:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ed      	bne.n	8001f96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc0:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a77      	ldr	r2, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03c      	beq.n	8002052 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01c      	beq.n	800201a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fe0:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe6:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fb9a 	bl	8000728 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff8:	f7fe fb96 	bl	8000728 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e11c      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 800200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ef      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x5cc>
 8002018:	e01b      	b.n	8002052 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 800201c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7fe fb7d 	bl	8000728 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002032:	f7fe fb79 	bl	8000728 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ff      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002044:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ef      	bne.n	8002032 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80f3 	beq.w	8002242 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	2b02      	cmp	r3, #2
 8002062:	f040 80c9 	bne.w	80021f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002066:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0203 	and.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	429a      	cmp	r2, r3
 8002078:	d12c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	3b01      	subs	r3, #1
 8002086:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d123      	bne.n	80020d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d11b      	bne.n	80020d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d113      	bne.n	80020d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d109      	bne.n	80020d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d06b      	beq.n	80021ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d062      	beq.n	80021a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020da:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0ac      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 80020f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f6:	f7fe fb17 	bl	8000728 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe fb13 	bl	8000728 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e099      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x77c>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800212c:	3a01      	subs	r2, #1
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002136:	0212      	lsls	r2, r2, #8
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800213e:	0852      	lsrs	r2, r2, #1
 8002140:	3a01      	subs	r2, #1
 8002142:	0552      	lsls	r2, r2, #21
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0652      	lsls	r2, r2, #25
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002156:	06d2      	lsls	r2, r2, #27
 8002158:	430a      	orrs	r2, r1
 800215a:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002178:	f7fe fad6 	bl	8000728 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7fe fad2 	bl	8000728 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e058      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_OscConfig+0x778>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	e050      	b.n	8002242 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e04f      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d144      	bne.n	8002242 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a23      	ldr	r2, [pc, #140]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d0:	f7fe faaa 	bl	8000728 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe faa6 	bl	8000728 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e02c      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_RCC_OscConfig+0x820>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x7ac>
 80021f6:	e024      	b.n	8002242 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d01f      	beq.n	800223e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCC_OscConfig+0x820>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_RCC_OscConfig+0x820>)
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe fa8d 	bl	8000728 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fa89 	bl	8000728 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e00f      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_OscConfig+0x820>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_OscConfig+0x820>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4905      	ldr	r1, [pc, #20]	; (800224c <HAL_RCC_OscConfig+0x820>)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_OscConfig+0x824>)
 8002238:	4013      	ands	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e001      	b.n	8002242 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	feeefffc 	.word	0xfeeefffc

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0e7      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b75      	ldr	r3, [pc, #468]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d910      	bls.n	8002298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4970      	ldr	r1, [pc, #448]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0cf      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b66      	ldr	r3, [pc, #408]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4960      	ldr	r1, [pc, #384]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d04c      	beq.n	800236c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d121      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0a6      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e09a      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230a:	4b4e      	ldr	r3, [pc, #312]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08e      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e086      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4943      	ldr	r1, [pc, #268]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe f9f4 	bl	8000728 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe f9f0 	bl	8000728 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e06e      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	429a      	cmp	r2, r3
 8002386:	d208      	bcs.n	800239a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	492b      	ldr	r1, [pc, #172]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d210      	bcs.n	80023ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	4923      	ldr	r1, [pc, #140]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e036      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4910      	ldr	r1, [pc, #64]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002408:	f000 f824 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <HAL_RCC_ClockConfig+0x1f4>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1fc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f92b 	bl	8000688 <HAL_InitTick>
 8002432:	4603      	mov	r3, r0
 8002434:	72fb      	strb	r3, [r7, #11]

  return status;
 8002436:	7afb      	ldrb	r3, [r7, #11]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	0800269c 	.word	0x0800269c
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x34>
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11e      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e004      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d134      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0xa6>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d003      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xac>
 80024f8:	e005      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e002      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	fb03 f202 	mul.w	r2, r3, r2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0e5b      	lsrs	r3, r3, #25
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800254c:	69bb      	ldr	r3, [r7, #24]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	080026ac 	.word	0x080026ac
 8002564:	00f42400 	.word	0x00f42400
 8002568:	016e3600 	.word	0x016e3600

0800256c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002584:	f7ff f9ee 	bl	8001964 <HAL_PWREx_GetVoltageRange>
 8002588:	6178      	str	r0, [r7, #20]
 800258a:	e014      	b.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025a4:	f7ff f9de 	bl	8001964 <HAL_PWREx_GetVoltageRange>
 80025a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d10b      	bne.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d919      	bls.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2ba0      	cmp	r3, #160	; 0xa0
 80025c8:	d902      	bls.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ca:	2302      	movs	r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e013      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d0:	2301      	movs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e010      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b80      	cmp	r3, #128	; 0x80
 80025da:	d902      	bls.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025dc:	2303      	movs	r3, #3
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e00a      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d102      	bne.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e004      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d101      	bne.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f4:	2301      	movs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 0207 	bic.w	r2, r3, #7
 8002600:	4909      	ldr	r1, [pc, #36]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	40022000 	.word	0x40022000

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4d0d      	ldr	r5, [pc, #52]	; (8002664 <__libc_init_array+0x38>)
 8002630:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	2600      	movs	r6, #0
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	4d0b      	ldr	r5, [pc, #44]	; (800266c <__libc_init_array+0x40>)
 800263e:	4c0c      	ldr	r4, [pc, #48]	; (8002670 <__libc_init_array+0x44>)
 8002640:	f000 f820 	bl	8002684 <_init>
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	2600      	movs	r6, #0
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026dc 	.word	0x080026dc
 8002668:	080026dc 	.word	0x080026dc
 800266c:	080026dc 	.word	0x080026dc
 8002670:	080026e0 	.word	0x080026e0

08002674 <memset>:
 8002674:	4402      	add	r2, r0
 8002676:	4603      	mov	r3, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <_init>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr

08002690 <_fini>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr
